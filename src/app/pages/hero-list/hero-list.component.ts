import { Component, Inject, ViewChild } from '@angular/core';
// Imports:
import { HeroesService } from 'src/app/services/heroes.service';
import { Observable } from 'rxjs';
import { MatTableDataSource, MatTableModule} from '@angular/material/table';
import { MatPaginator } from '@angular/material/paginator';
import { MatSortModule, MatSort, Sort} from '@angular/material/sort';

@Component({
  selector: 'app-hero-list',
  templateUrl: './hero-list.component.html',
  styleUrls: ['./hero-list.component.css']
})
export class HeroListComponent {

  // Service injection:
  constructor (
    private heroesService: HeroesService,
    // In strict mode, all variables must be initialized,
    // so 'heroes' is declared as public, inside the constructor
    @Inject(HeroesService) public heroes: Observable<any>, // Inject decorator is necessary for the dependency to work
    ) {}

  // Calculating total amount of required data arrays:
  //totalHeroes = 2708;
  //splitHeroes = 2708 / 100;
  //totalArrays = Math.round(this.splitHeroes); // +1
  maxOffsetIndex = 1500;
  //x = 0;
  
  // Data variables for Material Table:
  displayedColumns: string [] = ['Heroes'];
  dataSource: any = new MatTableDataSource();
  auxDataSource: any = new MatTableDataSource();
  dataArray = [];

  // Variables for URL generation:
  PUBLIC_KEY = 'ddbe649e8f64b8a35ba2a6203c2e9b86';
  // HASH is generated by passing this string combination: 1 + Private Key + Public Key
  // through a MD5 Hash Generator ( https://letmegooglethat.com/?q=MD5+hash+generator )
  // The Public and Private Keys are provided by the API ( https://developer.marvel.com/ )
  HASH = '1c820bbadd4cd42eb3139d95fe35aa64';
  
  OFFSET = 0; // URL parameter: controls the amount of elements skipped per call
  /*
  URL_API = `https:gateway.marvel.com/v1/public/characters?ts=1&apikey=${this.PUBLIC_KEY}&hash=${this.HASH}&offset=${this.OFFSET}&limit=100`; // '&limit=100' controls amount of elements returned (max 100 per call)
  //URL_API_2 = `https:gateway.marvel.com/v1/public/characters?ts=1&apikey=${this.PUBLIC_KEY}&hash=${this.HASH}&offset=100&limit=100`; <--- OUT OF USE
  */

  // Additional Mat Table functionalities:
  @ViewChild(MatSort) sort: MatSort;
  @ViewChild(MatPaginator) paginator: MatPaginator;

  // ------------------------------------------------------------
  // ============================================================
  // ------------------------------------------------------------

  ngOnInit() {
    //this.initializeDataArray();
    this.getHeroes();
    //this.getHeroes200();
  }

  ngAfterViewInit() { 
    // This must be executed after data loads
    // in order for Paginator to work properly:
    this.dataSource.paginator = this.paginator;
    this.dataSource.sort = this.sort;
  }

  // Method for getting a list with all Marvel heroes
  // Data is stored in 'heroes'
  getHeroes(){
  //this.initializeDataArray();
  //for (let i = 0; i < this.totalArrays; i+100) {    
    let URL_API = `https:gateway.marvel.com/v1/public/characters?ts=1&apikey=${this.PUBLIC_KEY}&hash=${this.HASH}&offset=${this.OFFSET}&limit=100`; // 1500 max admitted offset (retrieves all heroes until the Z) -- ${this.OFFSET}
    //console.log("URL: ", URL_API)

    this.heroes = this.heroesService.getAllHeroes(URL_API);  // Subscription to Observable is not necessary, RxJS manages subscription
    this.heroes.forEach(element => this.dataSource.data = element);

    console.log("DataSource: ", this.dataSource);
    //this.heroes.forEach(element => this.auxDataSource.data = element);    
    //this.heroes.forEach(element => this.dataSource.data.push(element))

    //this.dataSource.data.push(this.auxDataSource.data);
    //this.dataArray.push(this.auxDataSource);
    //this.dataSource.data.push(this.dataArray[this.x].data);
    //}
    
    
    if (this.OFFSET < this.maxOffsetIndex) {
      this.OFFSET = this.OFFSET + 100;
      //this.x = this.x + 1;
      this.getHeroes();
      //console.log("X: ", this.x);
      //console.log("Aux Data Source: ", this.auxDataSource);
      //console.log("Heroes Data Source: ", this.dataSource);
      //console.log("Aux Data Array: ", this.auxDataSource);
      //console.log("Data Array: ", this.dataArray);
    }
    

  }

  /*
  getHeroes200(){
    this.heroes = this.heroesService.getAllHeroes200();
    this.heroes.forEach(element => this.dataArray1.data = element);

    console.log("Heroes 2: ", this.dataArray1);
  } */

  /*
  initializeDataArray() {
    for (var i = 0; i < this.totalArrays; ++i) {
      this.dataArray[i] = new MatTableDataSource();
    }
  }
  */

  /*
  fusionarData() {
    //this.dataSource.data.push(this.dataArray1.data);
    for (let i = 0; i < this.dataArray1.data.length; i++) {
      this.dataSource.data.push(this.dataArray1.data[i]);
    }

    console.log("Heroes MIX: ", this.dataSource);
    console.log("Heroe Nro 200: ", this.dataSource.data[199]);
  }
  */
  
  // ---------- [ TABLE SEARCH FILTER ] ----------

  filterData ($event: any){
    this.dataSource.filter = $event.target.value;
  }

}